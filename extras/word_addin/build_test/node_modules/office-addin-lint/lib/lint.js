// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const defaults_1 = require("./defaults");
const esLintPath = require.resolve("eslint");
const prettierPath = require.resolve("prettier");
const esLintDir = path.parse(esLintPath).dir;
const esLintFilePath = path.resolve(esLintDir, "../bin/eslint.js");
const prettierFilePath = path.resolve(prettierPath, "../bin-prettier.js");
const esLintConfigPath = path.resolve(__dirname, "../config/.eslintrc.json");
function execCommand(command) {
    const execSync = require("child_process").execSync;
    const child = execSync(command, { stdio: "inherit" });
}
function normalizeFilePath(filePath) {
    return filePath.replace(/ /g, '\\ '); // Converting space to '\\'
}
function getEsLintBaseCommand() {
    const eslintBaseCommand = `node ${esLintFilePath} -c ${esLintConfigPath} --resolve-plugins-relative-to ${__dirname}`;
    return eslintBaseCommand;
}
function getLintCheckCommand(files) {
    const eslintCommand = `${getEsLintBaseCommand()} ${normalizeFilePath(files)}`;
    return eslintCommand;
}
exports.getLintCheckCommand = getLintCheckCommand;
function performLintCheck(files) {
    try {
        const command = getLintCheckCommand(files);
        execCommand(command);
        defaults_1.usageDataObject.sendUsageDataSuccessEvent("performLintCheck", { exitCode: defaults_1.ESLintExitCode.NoLintErrors });
    }
    catch (err) {
        if (err.status && err.status == defaults_1.ESLintExitCode.HasLintError) {
            defaults_1.usageDataObject.sendUsageDataSuccessEvent("performLintCheck", { exitCode: defaults_1.ESLintExitCode.HasLintError });
        }
        else {
            defaults_1.usageDataObject.sendUsageDataException("performLintCheck", err);
        }
        throw err;
    }
}
exports.performLintCheck = performLintCheck;
function getLintFixCommand(files) {
    const eslintCommand = `${getEsLintBaseCommand()} --fix ${normalizeFilePath(files)}`;
    return eslintCommand;
}
exports.getLintFixCommand = getLintFixCommand;
function performLintFix(files) {
    try {
        const command = getLintFixCommand(files);
        execCommand(command);
        defaults_1.usageDataObject.sendUsageDataSuccessEvent("performLintFix", { exitCode: defaults_1.ESLintExitCode.NoLintErrors });
    }
    catch (err) {
        if (err.status && err.status == defaults_1.ESLintExitCode.HasLintError) {
            defaults_1.usageDataObject.sendUsageDataSuccessEvent("performLintFix", { exitCode: defaults_1.ESLintExitCode.HasLintError });
        }
        else {
            defaults_1.usageDataObject.sendUsageDataException("performLintFix", err);
        }
        throw err;
    }
}
exports.performLintFix = performLintFix;
function getPrettierCommand(files) {
    const prettierFixCommand = `node ${prettierFilePath} --parser typescript --write ${normalizeFilePath(files)}`;
    return prettierFixCommand;
}
exports.getPrettierCommand = getPrettierCommand;
function makeFilesPrettier(files) {
    try {
        const command = getPrettierCommand(files);
        execCommand(command);
        defaults_1.usageDataObject.sendUsageDataSuccessEvent("makeFilesPrettier", { exitCode: defaults_1.PrettierExitCode.NoFormattingProblems });
    }
    catch (err) {
        if (err.status && err.status == defaults_1.PrettierExitCode.HasFormattingProblem) {
            defaults_1.usageDataObject.sendUsageDataSuccessEvent("makeFilesPrettier", {
                exitCode: defaults_1.PrettierExitCode.HasFormattingProblem
            });
        }
        else {
            defaults_1.usageDataObject.sendUsageDataException("makeFilesPrettier", err);
        }
        throw err;
    }
}
exports.makeFilesPrettier = makeFilesPrettier;
//# sourceMappingURL=lint.js.map