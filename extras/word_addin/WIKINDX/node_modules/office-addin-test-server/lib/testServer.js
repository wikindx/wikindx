// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cors = require("cors");
const express = require("express");
const https = require("https");
const devCerts = require("office-addin-dev-certs");
exports.defaultPort = 4201;
class TestServer {
    constructor(port) {
        this.app = express();
        this.jsonData = {};
        this.port = port;
        this.resultsPromise = undefined;
        this.testServerStarted = false;
    }
    startTestServer(mochaTest = false) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (mochaTest) {
                    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
                }
                // create express server instance
                const options = yield devCerts.getHttpsServerOptions();
                this.app.use(cors());
                this.server = https.createServer(options, this.app);
                // listen for 'ping'
                const platformName = this.getPlatformName();
                this.app.get("/ping", function (req, res, next) {
                    res.send(platformName);
                });
                // listen for posting of test results
                this.resultsPromise = new Promise((resolveResults) => __awaiter(this, void 0, void 0, function* () {
                    this.app.post("/results", (req, res) => __awaiter(this, void 0, void 0, function* () {
                        res.send("200");
                        this.jsonData = JSON.parse(req.query.data);
                        resolveResults(this.jsonData);
                    }));
                }));
                // start listening on specified port
                return yield this.startListening();
            }
            catch (err) {
                throw new Error(`Unable to start test server.\n${err}`);
            }
        });
    }
    stopTestServer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                if (this.testServerStarted) {
                    try {
                        this.server.close();
                        this.testServerStarted = false;
                        resolve(true);
                    }
                    catch (err) {
                        reject(new Error(`Unable to stop test server.\n${err}`));
                    }
                }
                else {
                    // test server not started
                    resolve(false);
                }
            }));
        });
    }
    getTestResults() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.resultsPromise;
        });
    }
    getTestServerState() {
        return this.testServerStarted;
    }
    getTestServerPort() {
        return this.port;
    }
    getPlatformName() {
        switch (process.platform) {
            case "win32":
                return "Windows";
            case "darwin":
                return "macOS";
            default:
                return process.platform;
        }
    }
    startListening() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    // set server to listen on specified port
                    this.server.listen(this.port, () => {
                        this.testServerStarted = true;
                        resolve(true);
                    });
                }
                catch (err) {
                    reject(new Error(`Unable to start test server.\n${err}`));
                }
            }));
        });
    }
}
exports.TestServer = TestServer;
//# sourceMappingURL=testServer.js.map